import SlectOption from './SlectOption';
import SlectConfig from './SlectConfig';
import './assets/less/slect.less';
declare class Slect<T extends SlectOption> {
    private opts;
    options: (T | SlectOption)[];
    private selectedOpts;
    selectedOptions: (T | SlectOption)[];
    private config;
    private readonly valueElement;
    private readonly inputContainerEl;
    private readonly inputEl;
    private readonly suggestionList;
    private readonly element;
    static readonly defaultConfig: SlectConfig<SlectOption>;
    onSelect: ((instance: Slect<T>, options: (SlectOption | T)[]) => void) | undefined;
    private focused;
    constructor(element: HTMLElement | string, options: T[], config?: Partial<SlectConfig<T>>);
    init(): void;
    onOptionSelect: (options: (SlectOption | T)[]) => void;
    validateSelection(): void;
    updateSelectionInView(): void;
    onClickBody: (event: Event) => void;
    onInputKeyUp: () => void;
    onInputKeyDown: (event: KeyboardEvent) => void;
    onInputChange: () => void;
    onFocus: () => void;
    onBlur: () => void;
    onClickValueElement: () => void;
    onClickClearButton: () => void;
    onClickExpandListButton: () => void;
    focus(focused: boolean): void;
    clearSelectedOptions(): void;
    closeSuggestionList(): void;
    updateInput(): void;
    updateSuggestionList(text?: string): void;
    static readonly version: string;
}
export default Slect;
